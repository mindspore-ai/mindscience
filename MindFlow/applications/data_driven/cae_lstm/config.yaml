# 1D case
1D_cae_data:
  data_path: "./dataset/sod.npy"    # ./dataset/sod.npy or ./dataset/shu_osher.npy
  batch_size: 8    # 8 for sod, 16 for shu_osher
  time_size: 531      # The numbers of the snapshots, 531 for sod, 2093 for shu_osher
1D_cae_optimizer:
  lr: 0.001
  weight_decay: 0.000001
  epochs: 4400
  save_ckpt_interval: 400
  summary_dir: "./summary"      # The directory where the training process files are saved
1D_cae_model:
  data_dimension: [256, 128, 64, 32, 16, 8]    # [256, 128, 64, 32, 16, 8] for sod, [512, 256, 128, 64, 32, 16] for shu_osher
  conv_kernel_size: 3
  maxpool_kernel_size: 2
  maxpool_stride: 2
  encoder_channels: [1, 40, 30, 20, 10, 5, 1]
  decoder_channels: [1, 1, 5, 10, 20, 30, 40, 1]
1D_lstm_data:
  batch_size: 4    # 4 for sod, 16 for shu_osher
  time_size: 531    # 531 for sod, 2093 for shu_osher
  latent_size: 4    # 4 for sod, 8 for shu_osher
  time_window: 70    # 70 for sod, 300 for shu_osher
  gaussian_filter_sigma: 3
1D_lstm_optimizer:
  lr: 0.001
  weight_decay: 0.000001
  epochs: 4400
  save_ckpt_interval: 400
  summary_dir: "./summary"
1D_lstm_model:
  latent_size: 4      # The input size of LSTM, 4 for sod, 8 for shu_osher
  hidden_size: 200
  num_layers: 2      # 2 for sod, 3 for shu_osher
1D_prediction:
  cae_ckpt_path: "./summary/ckpt/cae_4400.ckpt"
  lstm_ckpt_path: "./summary/ckpt/lstm_4000.ckpt"
  prediction_result_dir: "./prediction_result"


# 2D case
2D_cae_data:
  data_path: "./dataset/cylinder_re300.npy"
  batch_size: 8    # 16 for riemann, 32 for kh, 8 for cylinder
  time_size: 401      # The numbers of the snapshots, 1250 for riemann, 1786 for kh, 401 for cylinder
  multiple: 100      # 1 for riemann and kh, 100 for cylinder
2D_cae_optimizer:
  lr: 0.001
  weight_decay: 0.000001
  epochs: 4400
  save_ckpt_interval: 400
  summary_dir: "./summary"      # The directory where the training process files are saved
2D_cae_model:
  data_dimension: [128, 64, 32, 16, 8, 4]    # [128, 64, 32, 16, 8, 4] for riemann and cylinder, [256, 128, 64, 32, 16, 8] for kh
  conv_kernel_size: 3
  maxpool_kernel_size: 2
  maxpool_stride: 2
  encoder_channels: [ 1, 30, 25, 20, 15, 10, 5 ]    # [ 1, 30, 25, 20, 15, 10, 5 ] for riemann and cylinder, [1, 40, 30, 20, 10, 5, 1] for kh
  decoder_channels: [ 5, 5, 10, 15, 20, 25, 30, 1 ]    # [ 5, 5, 10, 15, 20, 25, 30, 1 ] for riemann and cylinder, [1, 1, 5, 10, 20, 30, 40, 1] for kh
  channels_dense: [ 20, 30, 25, 20 ]    # [ 20, 30, 25, 20 ] for riemann and cylinder, [16, 30, 25, 20] for kh
  latent_size: 20
2D_lstm_data:
  batch_size: 16    # 32 for riemann and kh, 16 for cylinder
  time_size: 401    # 1250 for riemann, 1786 for kh, 401 for cylinder
  latent_size: 20
  time_window: 60    # 150 for riemann, 200 for kh, 60 for cylinder
  gaussian_filter_sigma: 3
2D_lstm_optimizer:
  lr: 0.001
  weight_decay: 0.000001
  epochs: 4400
  save_ckpt_interval: 400
  summary_dir: "./summary"
2D_lstm_model:
  latent_size: 20      # The input size of LSTM
  hidden_size: 200
  num_layers: 3
2D_prediction:
  encoder_data_split: 1    # Split the dataset to reduce memory, 1 for riemann and cylinder, 4 for kh
  encoder_time_spilt: [ 0, 401 ]    # [ 0, 1250 ] for riemann, [ 0, 401 ] for cylinder, [0, 500, 1000, 1500, 1786] for kh
  decoder_data_split: 1    # 1 for riemann and cylinder, 4 for kh
  decoder_time_spilt: [ 0, 401 ]    # [ 0, 1250 ] for riemann, [ 0, 401 ] for cylinder, [0, 500, 1000, 1500, 1786] for kh
  cae_ckpt_path: "./summary/ckpt/cae_4400.ckpt"
  lstm_ckpt_path: "./summary/ckpt/lstm_4000.ckpt"
  prediction_result_dir: "./prediction_result"
