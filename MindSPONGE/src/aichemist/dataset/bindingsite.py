# Copyright 2021-2023 @ Shenzhen Bay Laboratory &
#                       Peking University &
#                       Huawei Technologies Co., Ltd
#
# This code is a part of AIchemist package.
#
# The AIchemist is open-source software based on the AI-framework:
# MindSpore (https://www.mindspore.cn/)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""
BindingSite
"""

import os
import random
from itertools import combinations

from rdkit import Chem
from rdkit.Chem import rdFreeSASA
import skimage
import numpy as np
from scipy import ndimage
from openbabel import pybel
from Bio import PDB
from Bio.PDB import SASA

from .. import core

RESI_ATOM_FEAT = {
    'ALA_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0966, 0, 0, 0, 0, 0],
    'ALA_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0381, 1, 0, 0, 0, 0],
    'ALA_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2337, 0, 0, 0, 0, 0],
    'ALA_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ALA_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ALA_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ALA_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0592, 0, 0, 0, 0, 0],
    'ALA_HB1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0252, 0, 0, 0, 0, 0],
    'ALA_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0252, 0, 0, 0, 0, 0],
    'ALA_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0252, 0, 0, 0, 0, 0],
    'ALA_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'ALA_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3027, 0, 0, 1, 1, 0],
    'ALA_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'ALA_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'ARG_HH11': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2545, 0, 0, 0, 0, 0],
    'ARG_HH12': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2545, 0, 0, 0, 0, 0],
    'ARG_HH21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2545, 0, 0, 0, 0, 0],
    'ARG_HH22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2545, 0, 0, 0, 0, 0],
    'ARG_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0995, 0, 0, 0, 0, 0],
    'ARG_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0231, 1, 0, 0, 0, 0],
    'ARG_CD': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0.0646, 0, 0, 0, 0, 0],
    'ARG_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0201, 1, 0, 0, 0, 0],
    'ARG_CZ': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 3, 0.341, 0, 0, 0, 0, 0],
    'ARG_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.234, 0, 0, 0, 0, 0],
    'ARG_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ARG_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ARG_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ARG_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0594, 0, 0, 0, 0, 0],
    'ARG_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0289, 0, 0, 0, 0, 0],
    'ARG_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0289, 0, 0, 0, 0, 0],
    'ARG_HD2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0655, 0, 0, 0, 0, 0],
    'ARG_HD3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0655, 0, 0, 0, 0, 0],
    'ARG_HE': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2578, 0, 0, 0, 0, 0],
    'ARG_HG2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0296, 0, 0, 0, 0, 0],
    'ARG_HG3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0296, 0, 0, 0, 0, 0],
    'ARG_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'ARG_NE': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.2787, 0, 0, 1, 1, 0],
    'ARG_NH1': [0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, -0.2919, 0, 0, 1, 1, 0],
    'ARG_NH2': [0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, -0.2919, 0, 0, 1, 1, 0],
    'ARG_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3025, 0, 0, 1, 1, 0],
    'ARG_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'ARG_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'ASN_HD21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1449, 0, 0, 0, 0, 0],
    'ASN_HD22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1449, 0, 0, 0, 0, 0],
    'ASN_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1076, 0, 0, 0, 0, 0],
    'ASN_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0.0506, 1, 0, 0, 0, 0],
    'ASN_CG': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2127, 0, 0, 0, 0, 0],
    'ASN_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2344, 0, 0, 0, 0, 0],
    'ASN_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'ASN_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'ASN_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'ASN_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0599, 0, 0, 0, 0, 0],
    'ASN_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0381, 0, 0, 0, 0, 0],
    'ASN_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0381, 0, 0, 0, 0, 0],
    'ASN_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'ASN_ND2': [0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, -0.3293, 0, 0, 1, 1, 0],
    'ASN_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.302, 0, 0, 1, 1, 0],
    'ASN_OD1': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.276, 0, 0, 1, 0, 0],
    'ASN_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'ASN_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2737, 0, 0, 1, 0, 0],
    'ASP_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1096, 0, 0, 0, 0, 0],
    'ASP_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0.076, 1, 0, 0, 0, 0],
    'ASP_CG': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.3582, 0, 0, 0, 0, 0],
    'ASP_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2345, 0, 0, 0, 0, 0],
    'ASP_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ASP_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ASP_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ASP_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.06, 0, 0, 0, 0, 0],
    'ASP_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0402, 0, 0, 0, 0, 0],
    'ASP_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0402, 0, 0, 0, 0, 0],
    'ASP_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'ASP_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3019, 0, 0, 1, 1, 0],
    'ASP_OD1': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2463, 0, 0, 1, 1, 0],
    'ASP_OD2': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2463, 0, 0, 1, 0, 0],
    'ASP_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 0, 0],
    'ASP_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2737, 0, 0, 1, 0, 0],
    'CYS_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1081, 0, 0, 0, 0, 0],
    'CYS_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0.0177, 1, 0, 0, 0, 0],
    'CYS_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2348, 0, 0, 0, 0, 0],
    'CYS_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'CYS_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'CYS_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'CYS_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0603, 0, 0, 0, 0, 0],
    'CYS_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0397, 0, 0, 0, 0, 0],
    'CYS_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0397, 0, 0, 0, 0, 0],
    'CYS_HG': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1017, 0, 0, 0, 0, 0],
    'CYS_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'CYS_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3017, 0, 0, 1, 1, 0],
    'CYS_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2442, 0, 0, 1, 1, 0],
    'CYS_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2737, 0, 0, 1, 0, 0],
    'CYS_SG': [0, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0, -0.1759, 1, 0, 1, 1, 0],
    'GLN_HE21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1449, 0, 0, 0, 0, 0],
    'GLN_HE22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1449, 0, 0, 0, 0, 0],
    'GLN_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0999, 0, 0, 0, 0, 0],
    'GLN_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0177, 1, 0, 0, 0, 0],
    'GLN_CD': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2106, 0, 0, 0, 0, 0],
    'GLN_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0.0259, 1, 0, 0, 0, 0],
    'GLN_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.234, 0, 0, 0, 0, 0],
    'GLN_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'GLN_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'GLN_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'GLN_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0595, 0, 0, 0, 0, 0],
    'GLN_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0292, 0, 0, 0, 0, 0],
    'GLN_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0292, 0, 0, 0, 0, 0],
    'GLN_HG2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0359, 0, 0, 0, 0, 0],
    'GLN_HG3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0359, 0, 0, 0, 0, 0],
    'GLN_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'GLN_NE2': [0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, -0.3293, 0, 0, 1, 1, 0],
    'GLN_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3025, 0, 0, 1, 1, 0],
    'GLN_OE1': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.276, 0, 0, 1, 0, 0],
    'GLN_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 0, 0],
    'GLN_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'GLU_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0999, 0, 0, 0, 0, 0],
    'GLU_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0158, 1, 0, 0, 0, 0],
    'GLU_CD': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.3561, 0, 0, 0, 0, 0],
    'GLU_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0.0513, 1, 0, 0, 0, 0],
    'GLU_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.234, 0, 0, 0, 0, 0],
    'GLU_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'GLU_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'GLU_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'GLU_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0595, 0, 0, 0, 0, 0],
    'GLU_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0293, 0, 0, 0, 0, 0],
    'GLU_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0293, 0, 0, 0, 0, 0],
    'GLU_HG2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.038, 0, 0, 0, 0, 0],
    'GLU_HG3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.038, 0, 0, 0, 0, 0],
    'GLU_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'GLU_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3025, 0, 0, 1, 1, 0],
    'GLU_OE1': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2464, 0, 0, 1, 0, 0],
    'GLU_OE2': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2464, 0, 0, 1, 1, 0],
    'GLU_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 0, 0],
    'GLU_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'GLY_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0.0882, 0, 0, 0, 0, 0],
    'GLY_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2308, 0, 0, 0, 0, 0],
    'GLY_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0894, 0, 0, 0, 0, 0],
    'GLY_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0894, 0, 0, 0, 0, 0],
    'GLY_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0894, 0, 0, 0, 0, 0],
    'GLY_HA2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0558, 0, 0, 0, 0, 0],
    'GLY_HA3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0558, 0, 0, 0, 0, 0],
    'GLY_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1492, 0, 0, 0, 0, 0],
    'GLY_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3052, 0, 0, 1, 1, 0],
    'GLY_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2446, 0, 0, 1, 1, 0],
    'GLY_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2741, 0, 0, 1, 0, 0],
    'HIS_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1046, 0, 0, 0, 0, 0],
    'HIS_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0.0134, 1, 0, 0, 0, 0],
    'HIS_CD2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0.0079, 0, 1, 0, 0, 1],
    'HIS_CE1': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 2, 0.1202, 0, 1, 0, 0, 1],
    'HIS_CG': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 1, 0.0212, 0, 1, 0, 0, 1],
    'HIS_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2343, 0, 0, 0, 0, 0],
    'HIS_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'HIS_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'HIS_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'HIS_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0598, 0, 0, 0, 0, 0],
    'HIS_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0349, 0, 0, 0, 0, 0],
    'HIS_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0349, 0, 0, 0, 0, 0],
    'HIS_HD1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1477, 0, 0, 0, 0, 0],
    'HIS_HD2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0794, 0, 0, 0, 0, 0],
    'HIS_HE1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0742, 0, 0, 0, 0, 0],
    'HIS_HE2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1474, 0, 0, 0, 0, 0],
    'HIS_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'HIS_ND1': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3255, 0, 1, 1, 1, 1],
    'HIS_NE2': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3279, 0, 1, 1, 1, 1],
    'HIS_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3021, 0, 0, 1, 1, 0],
    'HIS_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'HIS_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'ILE_HD11': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.023, 0, 0, 0, 0, 0],
    'ILE_HD12': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.023, 0, 0, 0, 0, 0],
    'ILE_HD13': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.023, 0, 0, 0, 0, 0],
    'ILE_HG12': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0266, 0, 0, 0, 0, 0],
    'ILE_HG13': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0266, 0, 0, 0, 0, 0],
    'ILE_HG21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'ILE_HG22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'ILE_HG23': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'ILE_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.102, 0, 0, 0, 0, 0],
    'ILE_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 0, -0.0171, 1, 0, 0, 0, 0],
    'ILE_CD1': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.065, 1, 0, 0, 0, 0],
    'ILE_CG1': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0512, 1, 0, 0, 0, 0],
    'ILE_CG2': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0603, 1, 0, 0, 0, 0],
    'ILE_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2342, 0, 0, 0, 0, 0],
    'ILE_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ILE_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ILE_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'ILE_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0597, 0, 0, 0, 0, 0],
    'ILE_HB': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0321, 0, 0, 0, 0, 0],
    'ILE_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'ILE_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3022, 0, 0, 1, 1, 0],
    'ILE_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'ILE_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'LEU_HD11': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0232, 0, 0, 0, 0, 0],
    'LEU_HD12': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0232, 0, 0, 0, 0, 0],
    'LEU_HD13': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0232, 0, 0, 0, 0, 0],
    'LEU_HD21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0232, 0, 0, 0, 0, 0],
    'LEU_HD22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0232, 0, 0, 0, 0, 0],
    'LEU_HD23': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0232, 0, 0, 0, 0, 0],
    'LEU_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0996, 0, 0, 0, 0, 0],
    'LEU_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0236, 1, 0, 0, 0, 0],
    'LEU_CD1': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0626, 1, 0, 0, 0, 0],
    'LEU_CD2': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0626, 1, 0, 0, 0, 0],
    'LEU_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 0, -0.0446, 1, 0, 0, 0, 0],
    'LEU_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.234, 0, 0, 0, 0, 0],
    'LEU_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'LEU_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'LEU_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'LEU_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0594, 0, 0, 0, 0, 0],
    'LEU_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.029, 0, 0, 0, 0, 0],
    'LEU_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.029, 0, 0, 0, 0, 0],
    'LEU_HG': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0296, 0, 0, 0, 0, 0],
    'LEU_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'LEU_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3025, 0, 0, 1, 1, 0],
    'LEU_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 0, 0],
    'LEU_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'LYS_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0994, 0, 0, 0, 0, 0],
    'LYS_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.026, 1, 0, 0, 0, 0],
    'LYS_CD': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0688, 1, 0, 0, 0, 0],
    'LYS_CE': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, -0.0963, 0, 0, 0, 0, 0],
    'LYS_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0526, 1, 0, 0, 0, 0],
    'LYS_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.234, 0, 0, 0, 0, 0],
    'LYS_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0594, 0, 0, 0, 0, 0],
    'LYS_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0288, 0, 0, 0, 0, 0],
    'LYS_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0288, 0, 0, 0, 0, 0],
    'LYS_HD2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0247, 0, 0, 0, 0, 0],
    'LYS_HD3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0247, 0, 0, 0, 0, 0],
    'LYS_HE2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0049, 0, 0, 0, 0, 0],
    'LYS_HE3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0049, 0, 0, 0, 0, 0],
    'LYS_HG2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0265, 0, 0, 0, 0, 0],
    'LYS_HG3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0265, 0, 0, 0, 0, 0],
    'LYS_HZ1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0901, 0, 0, 0, 0, 0],
    'LYS_HZ2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0901, 0, 0, 0, 0, 0],
    'LYS_HZ3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0901, 0, 0, 0, 0, 0],
    'LYS_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'LYS_NZ': [0, 0, 1, 0, 0, 0, 0, 0, 3, 1, 0, 0.3781, 0, 0, 1, 1, 0],
    'LYS_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3025, 0, 0, 1, 1, 0],
    'LYS_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'LYS_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'MET_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1002, 0, 0, 0, 0, 0],
    'MET_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0169, 1, 0, 0, 0, 0],
    'MET_CE': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 1, -0.0181, 1, 0, 0, 0, 0],
    'MET_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, -0.0044, 1, 0, 0, 0, 0],
    'MET_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.234, 0, 0, 0, 0, 0],
    'MET_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'MET_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'MET_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'MET_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0595, 0, 0, 0, 0, 0],
    'MET_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0296, 0, 0, 0, 0, 0],
    'MET_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0296, 0, 0, 0, 0, 0],
    'MET_HE1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.034, 0, 0, 0, 0, 0],
    'MET_HE2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.034, 0, 0, 0, 0, 0],
    'MET_HE3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.034, 0, 0, 0, 0, 0],
    'MET_HG2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0377, 0, 0, 0, 0, 0],
    'MET_HG3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0377, 0, 0, 0, 0, 0],
    'MET_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'MET_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3024, 0, 0, 1, 1, 0],
    'MET_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 0, 0],
    'MET_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'MET_SD': [0, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, -0.1641, 1, 0, 1, 0, 0],
    'PHE_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1034, 0, 0, 0, 0, 0],
    'PHE_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0007, 1, 0, 0, 0, 0],
    'PHE_CD1': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0585, 1, 1, 0, 0, 1],
    'PHE_CD2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0585, 1, 1, 0, 0, 1],
    'PHE_CE1': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0615, 1, 1, 0, 0, 1],
    'PHE_CE2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0615, 1, 1, 0, 0, 1],
    'PHE_CG': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, -0.0451, 1, 1, 0, 0, 1],
    'PHE_CZ': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0617, 1, 1, 0, 0, 1],
    'PHE_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2343, 0, 0, 0, 0, 0],
    'PHE_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'PHE_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'PHE_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'PHE_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0598, 0, 0, 0, 0, 0],
    'PHE_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0336, 0, 0, 0, 0, 0],
    'PHE_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0336, 0, 0, 0, 0, 0],
    'PHE_HD1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.062, 0, 0, 0, 0, 0],
    'PHE_HD2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.062, 0, 0, 0, 0, 0],
    'PHE_HE1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0618, 0, 0, 0, 0, 0],
    'PHE_HE2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0618, 0, 0, 0, 0, 0],
    'PHE_HZ': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0618, 0, 0, 0, 0, 0],
    'PHE_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'PHE_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3022, 0, 0, 1, 1, 0],
    'PHE_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 0, 0],
    'PHE_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'PRO_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1023, 0, 0, 0, 0, 1],
    'PRO_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0243, 1, 0, 0, 0, 1],
    'PRO_CD': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0.0156, 0, 0, 0, 0, 1],
    'PRO_CG': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.035, 1, 0, 0, 0, 1],
    'PRO_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2342, 0, 0, 0, 0, 0],
    'PRO_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0848, 0, 0, 0, 0, 0],
    'PRO_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0848, 0, 0, 0, 0, 0],
    'PRO_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0597, 0, 0, 0, 0, 0],
    'PRO_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0288, 0, 0, 0, 0, 0],
    'PRO_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0288, 0, 0, 0, 0, 0],
    'PRO_HD2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0465, 0, 0, 0, 0, 0],
    'PRO_HD3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0465, 0, 0, 0, 0, 0],
    'PRO_HG2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0281, 0, 0, 0, 0, 0],
    'PRO_HG3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0281, 0, 0, 0, 0, 0],
    'PRO_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 3, 0, -0.2884, 0, 0, 1, 0, 1],
    'PRO_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'PRO_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'SEC_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1069, 0, 0, 0, 0, 0],
    'SEC_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0.0246, 1, 0, 0, 0, 0],
    'SEC_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2346, 0, 0, 0, 0, 0],
    'SEC_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0601, 0, 0, 0, 0, 0],
    'SEC_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'SEC_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3019, 0, 0, 1, 1, 0],
    'SEC_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2737, 0, 0, 1, 0, 0],
    'SER_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1226, 0, 0, 0, 0, 0],
    'SER_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 1, 0.0711, 0, 0, 0, 0, 0],
    'SER_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2362, 0, 0, 0, 0, 0],
    'SER_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'SER_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'SER_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0889, 0, 0, 0, 0, 0],
    'SER_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0618, 0, 0, 0, 0, 0],
    'SER_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.058, 0, 0, 0, 0, 0],
    'SER_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.058, 0, 0, 0, 0, 0],
    'SER_HG': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2095, 0, 0, 0, 0, 0],
    'SER_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1496, 0, 0, 0, 0, 0],
    'SER_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3006, 0, 0, 1, 1, 0],
    'SER_OG': [0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0, -0.3927, 0, 0, 1, 1, 0],
    'SER_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2442, 0, 0, 1, 1, 0],
    'SER_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2737, 0, 0, 1, 0, 0],
    'THR_HG21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0255, 0, 0, 0, 0, 0],
    'THR_HG22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0255, 0, 0, 0, 0, 0],
    'THR_HG23': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0255, 0, 0, 0, 0, 0],
    'THR_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1252, 0, 0, 0, 0, 0],
    'THR_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.0792, 0, 0, 0, 0, 0],
    'THR_CG2': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0367, 1, 0, 0, 0, 0],
    'THR_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2365, 0, 0, 0, 0, 0],
    'THR_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0888, 0, 0, 0, 0, 0],
    'THR_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0888, 0, 0, 0, 0, 0],
    'THR_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.0888, 0, 0, 0, 0, 0],
    'THR_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0621, 0, 0, 0, 0, 0],
    'THR_HB': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0614, 0, 0, 0, 0, 0],
    'THR_HG1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2099, 0, 0, 0, 0, 0],
    'THR_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1496, 0, 0, 0, 0, 0],
    'THR_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3003, 0, 0, 1, 1, 0],
    'THR_OG1': [0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0, -0.3897, 0, 0, 1, 1, 0],
    'THR_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2442, 0, 0, 1, 0, 0],
    'THR_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2737, 0, 0, 1, 0, 0],
    'TRP_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1034, 0, 0, 0, 0, 0],
    'TRP_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0.0013, 1, 0, 0, 0, 0],
    'TRP_CD1': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0.006, 0, 1, 0, 0, 1],
    'TRP_CD2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0.0029, 1, 1, 0, 0, 1],
    'TRP_CE2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 1, 0.0467, 0, 1, 0, 0, 1],
    'TRP_CE3': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0523, 1, 1, 0, 0, 1],
    'TRP_CG': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, -0.0201, 1, 1, 0, 0, 1],
    'TRP_CH2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0598, 1, 1, 0, 0, 1],
    'TRP_CZ2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0378, 1, 1, 0, 0, 1],
    'TRP_CZ3': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0611, 1, 1, 0, 0, 1],
    'TRP_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2343, 0, 0, 0, 0, 0],
    'TRP_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0598, 0, 0, 0, 0, 0],
    'TRP_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0337, 0, 0, 0, 0, 0],
    'TRP_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0337, 0, 0, 0, 0, 0],
    'TRP_HD1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.081, 0, 0, 0, 0, 0],
    'TRP_HE1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1653, 0, 0, 0, 0, 0],
    'TRP_HE3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0624, 0, 0, 0, 0, 0],
    'TRP_HH2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0618, 0, 0, 0, 0, 0],
    'TRP_HZ2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0638, 0, 0, 0, 0, 0],
    'TRP_HZ3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0618, 0, 0, 0, 0, 0],
    'TRP_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'TRP_NE1': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3604, 0, 1, 0, 1, 1],
    'TRP_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3022, 0, 0, 1, 1, 0],
    'TRP_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'TRP_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'TYR_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1034, 0, 0, 0, 0, 0],
    'TYR_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 2, 0, -0.0007, 1, 0, 0, 0, 0],
    'TYR_CD1': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0551, 1, 1, 0, 0, 1],
    'TYR_CD2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0551, 1, 1, 0, 0, 1],
    'TYR_CE1': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0199, 1, 1, 0, 0, 1],
    'TYR_CE2': [0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, -0.0199, 1, 1, 0, 0, 1],
    'TYR_CG': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, -0.0449, 1, 1, 0, 0, 1],
    'TYR_CZ': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 1, 0.1169, 0, 1, 0, 0, 1],
    'TYR_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2343, 0, 0, 0, 0, 0],
    'TYR_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'TYR_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'TYR_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'TYR_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0598, 0, 0, 0, 0, 0],
    'TYR_HB2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0336, 0, 0, 0, 0, 0],
    'TYR_HB3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0336, 0, 0, 0, 0, 0],
    'TYR_HD1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0621, 0, 0, 0, 0, 0],
    'TYR_HD2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0621, 0, 0, 0, 0, 0],
    'TYR_HE1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0654, 0, 0, 0, 0, 0],
    'TYR_HE2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0654, 0, 0, 0, 0, 0],
    'TYR_HH': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.2921, 0, 0, 0, 0, 0],
    'TYR_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'TYR_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3022, 0, 0, 1, 1, 0],
    'TYR_OH': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.5068, 0, 0, 1, 1, 0],
    'TYR_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'TYR_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0],
    'VAL_HG11': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'VAL_HG12': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'VAL_HG13': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'VAL_HG21': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'VAL_HG22': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'VAL_HG23': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0233, 0, 0, 0, 0, 0],
    'VAL_CA': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 1, 0.1017, 0, 0, 0, 0, 0],
    'VAL_CB': [0, 1, 0, 0, 0, 0, 0, 0, 3, 3, 0, -0.0197, 1, 0, 0, 0, 0],
    'VAL_CG1': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0605, 1, 0, 0, 0, 0],
    'VAL_CG2': [0, 1, 0, 0, 0, 0, 0, 0, 3, 1, 0, -0.0605, 1, 0, 0, 0, 0],
    'VAL_C': [0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 2, 0.2342, 0, 0, 0, 0, 0],
    'VAL_H1': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'VAL_H2': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'VAL_H3': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -0.089, 0, 0, 0, 0, 0],
    'VAL_HA': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0597, 0, 0, 0, 0, 0],
    'VAL_HB': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0.0318, 0, 0, 0, 0, 0],
    'VAL_H': [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0.1495, 0, 0, 0, 0, 0],
    'VAL_N': [0, 0, 1, 0, 0, 0, 0, 0, 2, 2, 0, -0.3022, 0, 0, 1, 1, 0],
    'VAL_OXT': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2443, 0, 0, 1, 1, 0],
    'VAL_O': [0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, -0.2738, 0, 0, 1, 0, 0]
}


class Feature:
    """done: referred tfbio; todo: refer-to equibind
    """

    def __init__(self,
                 save_molecule_codes=True,
                 smarts_properties=None,
                 smarts_labels=None):
        self.feature_names = []

        self.atom_codes = {}
        metals = [3, 4, 11, 12, 13] + list(range(19, 32)) + \
            list(range(37, 51)) + list(range(55, 84)) + list(range(87, 104))
        atom_classes = [(5, 'B'), (6, 'C'), (7, 'N'), (8, 'O'), (15, 'P'),
                        ([16, 34], 'S'),
                        ([9, 17, 35, 53], 'halogen'),
                        (metals, 'metal')]
        for code, (atom, name) in enumerate(atom_classes):
            if isinstance(atom, list):
                for a in atom:
                    self.atom_codes[a] = code
            else:
                self.atom_codes[atom] = code
            self.feature_names.append(name)
        self.num_atom_classes = len(atom_classes)

        self.named_props = ['hyb', 'heavydegree', 'heterodegree', 'partialcharge']
        self.feature_names += self.named_props

        if save_molecule_codes:
            # remember if an atom belongs to the ligand or to the protein
            self.feature_names.append('molcode')
        self.callables = []

        if smarts_properties is None:
            self.smarts = ['[#6+0!$(*~[#7,#8,F]),SH0+0v2,s+0,S^3,Cl+0,Br+0,I+0]',
                           '[a]',
                           '[!$([#1,#6,F,Cl,Br,I,o,s,nX3,#7v5,#15v5,#16v4,#16v6,*+1,*+2,*+3])]',
                           '[!$([#6,H0,-,-2,-3]),$([!H0;#7,#8,#9])]',
                           '[r]']
            smarts_labels = ['hydrophobic', 'aromatic',
                             'acceptor', 'donor', 'ring']
        elif not isinstance(smarts_properties, (list, tuple, np.ndarray)):
            raise TypeError('smarts_properties must be a list')
        else:
            self.smarts = smarts_properties

        smarts_labels = [f'smarts{i}' for i in range(len(self.smarts))]
        self._patterns = [pybel.Smarts(smarts) for smarts in self.smarts]
        self.feature_names += smarts_labels

    def encode_num(self, atomic_num):
        """_summary_

        Args:
            atomic_num (_type_): _description_

        Raises:
            TypeError: _description_

        Returns:
            _type_: _description_
        """
        if not isinstance(atomic_num, int):
            raise TypeError(f'Atomic number must be int, {type(atomic_num)} was given')
        encoding = np.zeros(self.num_atom_classes)
        try:
            encoding[self.atom_codes.get(atomic_num)] = 1.0
        except RuntimeError:
            pass
        return encoding

    def find_smarts(self, molecule: pybel.Molecule):
        """_summary_

        Args:
            molecule (pybel.Molecule): _description_

        Raises:
            TypeError: _description_

        Returns:
            _type_: _description_
        """
        if not isinstance(molecule, pybel.Molecule):
            raise TypeError(f'molecule must be pybel.Molecule object, {type(molecule)}was given')
        features = np.zeros((len(molecule.atoms), len(self.__PATTERNS)))
        for (pattern_id, pattern) in enumerate(self.__PATTERNS):
            atoms_with_prop = pattern.findall(molecule)
            atoms_with_prop = np.array([a for atoms in atoms_with_prop for a in atoms]) - 1
            features[atoms_with_prop, pattern_id] = 1.0
        return features

    def get_features(self, molecule: pybel.Molecule, molcode=None):
        """_summary_

        Args:
            molecule (pybel.Molecule): _description_
            molcode (_type_, optional): _description_. Defaults to None.

        Raises:
            ValueError: _description_
            TypeError: _description_
            RuntimeError: _description_

        Returns:
            _type_: _description_
        """
        if molcode is None:
            if self.save_molecule_codes:
                raise ValueError(
                    'save_molecule_codes is set to True, you must specify code for the molecule')
        elif not isinstance(molcode, (float, int)):
            raise TypeError(f'motlype must be float, {type(molcode)} was given')
        coords = []
        features = []
        heavy_atoms = []
        # ignore hydrogens and dummy atoms (they have atomicnum set to 0)
        for i, atom in enumerate(molecule):
            if atom.atomicnum > 1:
                heavy_atoms.append(i)
                coords.append(atom.coords)
                feature = self.encode_num(atom.atomicnum).tolist() + \
                    [getattr(atom, prop) for prop in self.named_props] + \
                    [func(atom) for func in self.callables]
                features.append(feature)
        coords = np.array(coords, dtype=np.float32)
        features = np.array(features, dtype=np.float32)
        if self.save_molecule_codes:
            features = np.hstack(
                (features, molcode * np.ones((len(features), 1))))
        features = np.hstack(
            [features, self.find_smarts(molecule)[heavy_atoms]])
        if np.isnan(features).any():
            raise RuntimeError('got NaN when calculating features')
        return coords, features


class Rotator:
    """_summary_
    """

    def __init__(self):
        # create matrices for all possible 90* rotations of a box
        self.rotations = [self._rotation_matrix([1, 1, 1], 0)]
        for a1 in range(3):  # about X, Y and Z - 9 rotations
            for t in range(1, 4):
                axis = np.zeros(3)
                axis[a1] = 1
                theta = t * np.pi / 2.0
                self.rotations.append(self._rotation_matrix(axis, theta))
        for (a1, a2) in combinations(range(3), 2):  # about each face diagonal - 6 rotations
            axis = np.zeros(3)
            axis[[a1, a2]] = 1.0
            theta = np.pi
            self.rotations.append(self._rotation_matrix(axis, theta))
            axis[a2] = -1.0
            self.rotations.append(self._rotation_matrix(axis, theta))
        for t in [1, 2]:  # about each space diagonal - 8 rotations
            theta = t * 2 * np.pi / 3
            axis = np.ones(3)
            self.rotations.append(self._rotation_matrix(axis, theta))
            for a1 in range(3):
                axis = np.ones(3)
                axis[a1] = -1
                self.rotations.append(self._rotation_matrix(axis, theta))

    @staticmethod
    def _rotation_matrix(axis, theta):
        """counterclockwise rotation about a given axis by theta radians"""
        if not isinstance(axis, (np.ndarray, list, tuple)):
            raise TypeError('axis must be an array of floats of shape (3,)')
        axis = np.asarray(axis, dtype=float)

        if axis.shape != (3,):
            raise ValueError('axis must be an array of floats of shape (3,)')

        if not isinstance(theta, (float, int)):
            raise TypeError('theta must be a float')

        axis = axis / np.sqrt(np.dot(axis, axis))
        a = np.cos(theta / 2.0)
        b, c, d = -axis * np.sin(theta / 2.0)
        aa, bb, cc, dd = a * a, b * b, c * c, d * d
        bc, ad, ac, ab, bd, cd = b * c, a * d, a * c, a * b, b * d, c * d
        return np.array([[aa + bb - cc - dd, 2 * (bc + ad), 2 * (bd - ac)],
                         [2 * (bc - ad), aa + cc - bb - dd, 2 * (cd + ab)],
                         [2 * (bd + ac), 2 * (cd - ab), aa + dd - bb - cc]])

    def rotate(self, coords, rotation):
        """rotate"""
        if not isinstance(coords, (np.ndarray, list, tuple)):
            raise TypeError('coords must be an array of floats of shape (N, 3)')
        coords = np.asarray(coords, dtype=float)
        shape = coords.shape
        if len(shape) != 2 or shape[1] != 3:
            raise ValueError('coords must be an array of floats of shape (N, 3)')
        if isinstance(rotation, int):
            if rotation < 0 or rotation >= len(self.rotations):
                raise ValueError(f'Invalid rotation number {rotation}!')
            return np.dot(coords, self.rotations[rotation])
        if isinstance(rotation, np.ndarray) and rotation.shape == (3, 3):
            return np.dot(coords, rotation)
        raise ValueError(f'Invalid rotation {rotation}!')


class BindingSite(core.DataLoader):
    """_summary_

    Args:
        core (_type_): _description_
    """
    _caches = ['protein_coords', 'protein_features', 'cavity_coords', 'cavity_features']

    def __init__(self,
                 tidy_path,
                 site_file='ligand.mol2',
                 protein_cavity_same_feature=False,
                 resolution_scale=0.5,
                 max_distance=35,
                 max_translation=3,
                 footprint=None,
                 file_format='mol2',
                 debug_size=None,
                 surface_scale=1.4,
                 **kwargs):
        super().__init__(**kwargs)
        self.tidy_path = tidy_path
        self.resolution_scale = resolution_scale
        self.surface_scale = surface_scale
        self.max_distance = max_distance
        self.max_translation = max_translation
        self.site_file = site_file
        self.protein_cavity_same_feature = protein_cavity_same_feature
        self.file_format = file_format
        self.debug_size = debug_size
        # for cavity6.mol2  #dim should be 18 for Unet
        box_size = int(np.ceil(2 * max_distance * resolution_scale + 1))  # TODO +2?
        if footprint is not None:  # footprint: margin for pocket based on ligand structure
            if isinstance(footprint, int):
                if footprint == 0:
                    footprint = np.ones([1] * 5)
                elif footprint < 0:
                    raise ValueError('footprint cannot be negative')
                elif (2 * footprint + 3) > box_size:
                    raise ValueError('footprint cannot be bigger than box')
                else:
                    footprint = skimage.draw.ellipsoid(
                        footprint, footprint, footprint)
                    footprint = footprint.reshape((1, *footprint.shape, 1))
            elif isinstance(footprint, np.ndarray):
                if not ((footprint.ndim == 5) and (len(footprint) == 1) and (footprint.shape[-1] == 1)):
                    raise ValueError(f'footprint shape should be (1, N, M, L, 1), got {footprint.shape} instead')
            else:
                raise TypeError(f'footprint should be either int or np.ndarray of shape (1, N, M, L, 1), got \
                    {type(footprint)} instead')
            self.footprint = footprint
        else:
            footprint = skimage.draw.ellipsoid(2, 2, 2)
            self.footprint = footprint.reshape((1, *footprint.shape, 1))

        self.names = sorted(os.listdir(tidy_path))
        self.transform_random = 1
        self.y_channels = None

    def __getitem__(self, index):
        protein_coords, protein_features, cavity_coords, cavity_features = super().__getitem__(index)
        rotation = random.choice(range(0, 24)) if self.transform_random else 0
        translation = self.max_translation * np.random.rand(1, 3) if self.transform_random else (0, 0, 0)
        receptor_coords = Rotator().rotate(protein_coords, rotation) + translation
        receptor_grid = self.make_grid(receptor_coords, protein_features, grid_resolution=1.0/self.resolution_scale)

        pocket_coords = Rotator().rotate(cavity_coords, rotation)
        # Convert atom coordinates and features represented as 2D arrays into a fixed-sized 3D box
        cavity_grid = self.make_grid(pocket_coords, cavity_features)

        margin = ndimage.maximum_filter(cavity_grid, footprint=self.footprint)
        cavity_grid += margin
        cavity_grid = cavity_grid.clip(0, 1)
        zoom = receptor_grid.shape[1] / cavity_grid.shape[1]
        cavity_grid = np.stack(
            [ndimage.zoom(cavity_grid[0, ..., i], zoom) for i in range(self.y_channels)], -1)
        cavity_grid = np.expand_dims(cavity_grid, 0)
        return receptor_grid, cavity_grid  # , centroid, name

    def __next__(self):
        if self.iterator >= len(self):
            raise StopIteration
        end = min(self.iterator + self.batch_size, len(self))

        receptor_grids = []
        cavity_grids = []
        for i in range(self.iterator, end):
            receptor_grid, cavity_grid = self[i]
            receptor_grids.append(receptor_grid)
            cavity_grids.append(cavity_grid)
        return np.concatenate(receptor_grids), np.concatenate(cavity_grids)

    def process(self):
        """_summary_

        Returns:
            _type_: _description_
        """
        protein_coords = []
        protein_features = []
        cavity_coords = []
        cavity_features = []
        centroids = []
        feature = Feature(save_molecule_codes=False)
        for i, name in enumerate(self.names):
            if self.debug_size and i == self.debug_size:
                break
            print('load '+str(i)+'/'+str(len(self.names))+' '+name+' ...')
            pdb_path = os.path.join(self.tidy_path, name, name + '_protein.pdb')

            protein_coord, protein_feature = self.protein_biopy_featurizer(pdb_path)
            cavity = next(pybel.readfile(self.file_format, os.path.join(self.tidy_path, name, self.site_file)))
            if self.protein_cavity_same_feature:
                cavity_coord, cavity_feature = feature.get_features(cavity)
            else:
                cavity_coord = np.zeros([len(cavity.atoms), 3])
                for j, atom in enumerate(cavity.atoms):
                    cavity_coord[j] = atom.coords
                cavity_feature = np.ones((len(cavity_coord), 1))
            centroid = protein_coord.mean(axis=0)
            protein_coord -= centroid
            cavity_coord -= centroid

            protein_coords.append(protein_coord)
            protein_features.append(protein_feature)
            cavity_coords.append(cavity_coord)
            cavity_features.append(cavity_feature)
        self.initialize(protein_coords=protein_coords,
                        protein_features=protein_features,
                        cavity_coords=cavity_coords,
                        cavity_features=cavity_features,
                        centroids=centroids)
        self.y_channels = self.cavity_features[0].shape[1]  # cavity_features  #36
        return self

    # output data shape is [G,G,G,F]
    def make_grid(self, coords, features, grid_resolution=1.0/2):
        """_summary_

        Args:
            coords (_type_): _description_
            features (_type_): _description_
            grid_resolution (_type_, optional): _description_. Defaults to 1.0/2.

        Raises:
            ValueError: _description_
            ValueError: _description_
            TypeError: _description_
            ValueError: _description_
            TypeError: _description_
            ValueError: _description_

        Returns:
            _type_: _description_
        """
        coords = np.asarray(coords, dtype=float)
        c_shape = coords.shape
        if len(c_shape) != 2 or c_shape[1] != 3:
            raise ValueError('coords must be an array of floats of shape (N, 3)')
        n_atoms = len(coords)
        features = np.asarray(features, dtype=float)
        f_shape = features.shape
        if len(f_shape) != 2 or f_shape[0] != n_atoms:
            raise ValueError('features must be an array of floats of shape (N, F)')
        if not isinstance(grid_resolution, (float, int)):
            raise TypeError('grid_resolution must be float')
        if grid_resolution <= 0:
            raise ValueError('grid_resolution must be positive')
        if not isinstance(self.max_distance, (float, int)):
            raise TypeError('max_dist must be float')
        if self.max_distance <= 0:
            raise ValueError('max_dist must be positive')
        num_features = f_shape[1]
        box_size = int(np.ceil(2. * self.max_distance / grid_resolution + 1))
        # move all atoms to the nearest grid point
        grid_coords = ((coords + self.max_distance + 0.) / grid_resolution).round().astype(int)
        in_box = ((grid_coords >= 0) & (grid_coords < box_size)).all(axis=1)  # remove atoms outside the box
        grid = np.zeros((1, box_size, box_size, box_size, num_features), dtype=np.float32)
        for (x, y, z), f in zip(grid_coords[in_box], features[in_box]):
            grid[0, x, y, z] += f
        return grid

    def protein_rdkit_featurizer(self, pdb_path):
        """_summary_

        Args:
            pdb_path (_type_): _description_

        Returns:
            _type_: _description_
        """
        mol = Chem.MolFromPDBFile(pdb_path)
        coords = mol.GetConformer().GetPositions()
        feature = []
        radii = rdFreeSASA.classifyAtoms(mol)
        if radii:
            rdFreeSASA.CalcSASA(mol, radii)
        for atom in mol.GetAtoms():
            name = atom.GetPDBResidueInfo().GetName().strip()
            resi = atom.GetPDBResidueInfo().GetResidueName().strip()
            key = resi + '_' + name
            if key not in RESI_ATOM_FEAT:
                continue
            if radii:
                surface = float(atom.GetProp("SASA")) > self.surface_scale
            else:
                surface = 0
            feature.append(RESI_ATOM_FEAT.get(key) + [surface])
        return coords, np.array(feature)

    def protein_biopy_featurizer(self, pdb_path):
        """_summary_

        Args:
            pdb_path (_type_): _description_

        Returns:
            _type_: _description_
        """
        sr = SASA.ShrakeRupley(probe_radius=1.4, n_points=1)

        rec = PDB.PDBParser().get_structure('random_id', pdb_path)[0]
        sr.compute(rec, level="A")
        coords = []
        features = []
        for atom in rec.get_atoms():
            coord = list(atom.get_vector())
            name = atom.name
            resi = atom.get_parent().get_resname()
            key = resi + '_' + name
            if key not in RESI_ATOM_FEAT:
                continue
            features.append(RESI_ATOM_FEAT.get(key) + [atom.sasa])
            coords.append(coord)
        return np.array(coords), np.array(features)
